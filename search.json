[{"path":"https://dmurdoch.github.io/parseLatex/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://dmurdoch.github.io/parseLatex/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://dmurdoch.github.io/parseLatex/articles/parseLatex.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The parseLatex package","text":"Parsing LaTeX tricky, LaTeX macros (LaTeX packages, user code) can change parsing rules go. parseLatex LaTeX interpreter (least mostly isn’t, see detailed comparison ), can’t : uses parsing rules code looks . ’re using LaTeX package uses non-standard rules, can use , apply whole section code passed parseLatex(). Subject limitation code uses one set rules, parseLatex able parse LaTeX code. extends base tools::parseLatex() function ways: classifies every character source file according TeX “catcodes”. base function handles . parseLatex::parseLatex() function marks output class \"LaTeX2\" instead \"LaTeX\", marks item output class \"LaTeX2item\". allows print things readable way. parseLatex package includes large selection functions extracting modifying parts parsed LaTeX. differences listed .","code":""},{"path":"https://dmurdoch.github.io/parseLatex/articles/parseLatex.html","id":"demo","dir":"Articles","previous_headings":"","what":"Demo","title":"The parseLatex package","text":"simple demonstration order. First, use knitr create LaTeX table. Next, parse parseLatex. Printing result appear duplicate input, fact quite different. parsed list class \"LaTeX2\". Items list class \"LaTeX2item\". example, two items: blank knitr puts beginning table, second entry whole table environment: “SPECIAL” “ENVIRONMENT” label types items. table environment contains environment name, \"LaTeX2\" list containing content. hadn’t known put , find table location using find_env(): can extract table, use functions work :","code":"library(knitr) latex <- kable(mtcars[1:2, 1:2], format = \"latex\") cat(latex) #>  #> \\begin{tabular}{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular} library(parseLatex) parsed <- parseLatex(latex) parsed[[1]] #> SPECIAL: parsed[[2]] #> ENVIRONMENT: \\begin{tabular}{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular} find_env(parsed, \"tabular\") #> [1] 2 table <- parsed[[find_env(parsed, \"tabular\")]] # Get the alignment options from the content columnOptions(table) #> {l|r|r} tableCell(table, 2,2) # The title counts as a row #>  21 tableCell(table, 1,1) <- \"Model\" table #> ENVIRONMENT: \\begin{tabular}{l|r|r} #> \\hline #>  Model & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular}"},{"path":"https://dmurdoch.github.io/parseLatex/articles/parseLatex.html","id":"differences-from-toolsparselatex","dir":"Articles","previous_headings":"","what":"Differences from tools::parseLatex","title":"The parseLatex package","text":"parser package based one used base R tools::parseLatex function (also wrote, based parsers R). output format similar, compatible. main differences R 4.4.2. Several changes incorporated R 4.5.0. package tools::parseLatex, result calling parser list items. list class \"LaTeX2\" package, class \"LaTeX\" tools::parseLatex. items attribute returned latexTag() function identifying type item. package possible tags tools::parseLatex() parser SPECIAL; characters included TEXT. also doesn’t DEFINITION ERROR tags. Definitions treated regular macros, sometimes leads parsing errors. Errors always fatal. (DEFINITION added R 4.5.0.) parser stops reaches \\end{document}, just LaTeX . tools::parseLatex() parser R 4.4.2 continues parsing beyond , often leading parsing errors tries parse things LaTeX ignore. fixed R 4.5.0. implementations, items (COMMENT, MACRO, SPECIAL, TEXT, VERB) stored length 1 character vectors; others stored lists items corresponding content. list storage different two. tools::parseLatex() function stores lists two levels (e.g. content environment named item item[[2]]), package, lists contain content directly (e.g. content environment item ). package marks items class \"LaTeX2item\". tools::parseLatex() assign class items. package provides print methods class \"LaTeX2item\" individual items print nicely. Parsing errors reported informatively package. parser supports “magic comments”. See next section details. parser flexible handling verb macros like \\Sexpr. tools::parseLatex() parser assumed braces within macro (case legal Sweave() source). parser assumes braces within macro balanced, e.g. legal:\\Sexpr{1 + {x <- 2; x + 1}} whereas unbalanced braces . mentioned , parseLatex() little bit parsing. versions recognize LaTeX environments verbatim code. parser package also takes special action sees document environment: stops parsing \\end{document}. (can use get_leftovers() function see parts input skipped.) also changes rules bit sees macros defining things: \\newenvironment, \\renewenvironment, \\newcommand, \\renewcommand \\providecommand. arguments macros parsed interpreted, allowing definitions parse without triggering syntax error. example: \\begin{oldenv} part definition shouldn’t interpreted start oldenv environment, \\end{oldenv} isn’t {} block. Two plain TeX versions macros \\def \\let. recognized attempt made handle , ’s really arcane syntax possible. use , probably won’t parsed properly. Stick simple syntax like okay. likely added R 4.5.0, limitations.","code":"\\newenvironment{newenv}{\\begin{oldenv}}{\\end{oldenv}} \\def\\bea{\\begin{eqnarray*}}"},{"path":"https://dmurdoch.github.io/parseLatex/articles/parseLatex.html","id":"magic-comments","dir":"Articles","previous_headings":"","what":"Magic Comments","title":"The parseLatex package","text":"parseLatex::parseLatex() parser can parse LaTeX inputs, . allow used files contain unsupported syntax, allows “magic comments” inserted control actions. Several LaTeX editors support magic comments form % !TEX ..., model parseLatex magic comment support. 4 magic comments supported parser: % !parser tells parser absorb following text part comment, anything classed parsing error never seen. % !parser tells resume normal parsing. % !parser verb [name] tells parser add name list macros holding verbatim text, .e. list given verb argument parseLatex() called. name include backslash, e.g.% !parser verb \\Sexpr add default verb macro. % !parser defcmd [name] commands like \\newcommand. % !parser defenv [name] commands like \\newenvironment. % !parser verbatim [name] tells parser add name list environments holding verbatim text, .e. list given verbatim argument. example% !parser verbatim Sinput add one default verbatim environments. parser quite strict format magic comments. whitespace parts must spaces, tabs, nothing else can appear comment magic text spaces.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/articles/parseLatex.html","id":"work-in-progress","dir":"Articles","previous_headings":"","what":"Work in progress!","title":"The parseLatex package","text":"work progress, use something like need help, post “issue” Github page: https://github.com/dmurdoch/parseLatex .","code":""},{"path":"https://dmurdoch.github.io/parseLatex/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Duncan Murdoch. Author, maintainer. R Core Team. Contributor, copyright holder.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Murdoch D (2025). parseLatex: Parse 'LaTeX' Code. R package version 0.3.11, https://dmurdoch.github.io/parseLatex/, https://github.com/dmurdoch/parseLatex.","code":"@Manual{,   title = {parseLatex: Parse 'LaTeX' Code},   author = {Duncan Murdoch},   year = {2025},   note = {R package version 0.3.11, https://dmurdoch.github.io/parseLatex/},   url = {https://github.com/dmurdoch/parseLatex}, }"},{"path":"https://dmurdoch.github.io/parseLatex/index.html","id":"parselatex","dir":"","previous_headings":"","what":"Parse LaTeX Code","title":"Parse LaTeX Code","text":"goal parseLatex provide parser subset LaTeX syntax complete handled tools::parseLatex() parser. Perhaps day handle LaTeX inputs, ’s likely. now, ’m aiming handle anything knitr::kable() kableExtra functions produce, plus related code. website describing current state : https://dmurdoch.github.io/parseLatex/ .","code":""},{"path":"https://dmurdoch.github.io/parseLatex/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parse LaTeX Code","text":"can install development version parseLatex GitHub :","code":"# install.packages(\"pak\") pak::pak(\"dmurdoch/parseLatex\")"},{"path":"https://dmurdoch.github.io/parseLatex/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Parse LaTeX Code","text":"basic example.","code":"library(parseLatex) library(kableExtra) latex <- kbl(mtcars[1:2, 1:2], format = \"latex\") cat(latex) #>  #> \\begin{tabular}[t]{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular} parsed <- parseLatex(latex) # This is a blank followed by a table; drop the blank table <- parsed[[find_env(parsed, \"tabular\")]] # Get the alignment options from the content brace_options(get_contents(table)) #> {l|r|r} tableCell(table, 2,2) # The title counts! #>  21 tableCell(table, 2,2) <- \"Changed!\" table #> ENVIRONMENT: \\begin{tabular}[t]{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & Changed! & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular}"},{"path":"https://dmurdoch.github.io/parseLatex/index.html","id":"to-do-list","dir":"","previous_headings":"","what":"To-do list","title":"Parse LaTeX Code","text":"Possibly add class table objects, implement indexing subsetting class. See kableExtra tables, try make easier. something math environments?","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/LaTeX2range.html","id":null,"dir":"Reference","previous_headings":"","what":"Ranges within LaTeX2 lists. — LaTeX2range","title":"Ranges within LaTeX2 lists. — LaTeX2range","text":"Ranges within LaTeX2 lists.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/LaTeX2range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ranges within LaTeX2 lists. — LaTeX2range","text":"","code":"LaTeX2range(path, range)  # S3 method for class 'LaTeX2range' print(x, source = NULL, ...)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/LaTeX2range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ranges within LaTeX2 lists. — LaTeX2range","text":"path integer vector use path. range range values within path. x Object print. source Optional parsed list extract range. ... Ignored.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/LaTeX2range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ranges within LaTeX2 lists. — LaTeX2range","text":"LaTeX2range() returns constructed LaTeX2range object.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/LaTeX2range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ranges within LaTeX2 lists. — LaTeX2range","text":"LaTeX2range objects lists path range entries.  path recursive index LaTeX2 list, range range entries result. path NULL, object refers entire source object.  range NULL, refers whole LaTeX2item given path.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/Utilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscellaneous utilities — Utilities","title":"Miscellaneous utilities — Utilities","text":"Miscellaneous utilities","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/Utilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Miscellaneous utilities — Utilities","text":"","code":"drop_items(items, which)  select_items(items, which)  drop_whitespace(items)  trim_whitespace(items)  include_whitespace(items, which)  split_list(items, splits)  split_latex(items, splits)  new_block(...)  new_env(name, ...)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/Utilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Miscellaneous utilities — Utilities","text":"items LaTeX2 object list items, LaTeX2item list. items operate . splits items divide parts? ... Items passed latex2(). name desired environment name.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/Utilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Miscellaneous utilities — Utilities","text":"drop_items() returns list items specific items removed. select_items() returns list subsetted items. drop_whitespace() returns items whitespace (blanks, tabs, newlines) removed. trim_whitespace() returns items leading trailing whitespace (blanks, tabs, newlines) removed. include_whitespace() returns following whitespace (blanks, tabs, newlines) included. split_list() returns list pieces separated splits. split_latex() returns list pieces separated splits.  piece marked LaTeX2 object. new_block() returns BLOCK item containing items. new_env() returns environment item containing items.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/Utilities.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Miscellaneous utilities — Utilities","text":"drop_whitespace() drop whitespace separates text items, deparsing merge single item.","code":""},{"path":[]},{"path":"https://dmurdoch.github.io/parseLatex/reference/Utilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Miscellaneous utilities — Utilities","text":"","code":"new_block(parseLatex(\"abc\")) #> BLOCK: {abc} new_env(\"itemize\", parseLatex(\"\\\\item An item\")) #> ENVIRONMENT: \\begin{itemize}\\item An item\\end{itemize}"},{"path":"https://dmurdoch.github.io/parseLatex/reference/as_LaTeX2.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to LaTeX2 — as_LaTeX2","title":"Coerce to LaTeX2 — as_LaTeX2","text":"Coerce LaTeX2","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/as_LaTeX2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to LaTeX2 — as_LaTeX2","text":"","code":"as_LaTeX2(x)  latex2(...)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/as_LaTeX2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to LaTeX2 — as_LaTeX2","text":"x object convert LaTeX2 object. ... Objects concatenate.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/as_LaTeX2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to LaTeX2 — as_LaTeX2","text":"as_LaTeX2() converts x LaTeX2 object. latex2() converts arguments LaTeX2 objects concatenates new LaTeX2 object.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/defaultCatcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"The default ","title":"The default ","text":"default \"catcodes\" used parseLatex.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/defaultCatcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The default ","text":"","code":"defaultCatcodes"},{"path":"https://dmurdoch.github.io/parseLatex/reference/defaultCatcodes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The default ","text":"object class data.frame 13 rows 2 columns.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/defaultCatcodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The default ","text":"defaultCatcodes dataframe containing default catcode definitions.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/defaultCatcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The default ","text":"","code":"# \\makeatletter has no effect by default... unclass(parseLatex(\"\\\\makeatletter\\\\internal@macro\")) #> [[1]] #> MACRO: \\makeatletter #>  #> [[2]] #> MACRO: \\internal #>  #> [[3]] #> SPECIAL: @ #>  #> [[4]] #> TEXT: macro #>  # ... but the effect can be simulated atletter <- rbind(defaultCatcodes,                   data.frame(char=\"@\", catcode=11)) unclass(parseLatex(\"\\\\makeatletter\\\\internal@macro\",                    catcodes = atletter)) #> [[1]] #> MACRO: \\makeatletter #>  #> [[2]] #> MACRO: \\internal@macro #>  # These are the default codes: cbind(defaultCatcodes, name = c(\"ESCAPE\", \"LBRACE\", \"RBRACE\", \"MATH\",      \"ALIGN\",  \"NEWLINE\",\"NEWLINE\", \"PARAM\",  \"SUPER\",      \"SUB\",    \"SPACE\",  \"SPACE\", \"COMMENT\")) #>    char catcode    name #> 1    \\\\       0  ESCAPE #> 2     {       1  LBRACE #> 3     }       2  RBRACE #> 4     $       3    MATH #> 5     &       4   ALIGN #> 6    \\n       5 NEWLINE #> 7    \\r       5 NEWLINE #> 8     #       6   PARAM #> 9     ^       7   SUPER #> 10    _       8     SUB #> 11           10   SPACE #> 12   \\t      10   SPACE #> 13    %      14 COMMENT # The missing ones are #  9 - IGNORE # 11 - LETTER # 12 - OTHER # 13 - ACTIVE # 15 - INVALID"},{"path":"https://dmurdoch.github.io/parseLatex/reference/deparseLatex.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert latex object into character vector — deparseLatex","title":"Convert latex object into character vector — deparseLatex","text":"Convert latex object character vector","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/deparseLatex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert latex object into character vector — deparseLatex","text":"","code":"deparseLatex(x, dropBraces = FALSE)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/deparseLatex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert latex object into character vector — deparseLatex","text":"x latex object. dropBraces Whether drop unnecessary braces.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/deparseLatex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert latex object into character vector — deparseLatex","text":"deparseLatex returns character vector corresponding parsed Latex.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_captions.html","id":null,"dir":"Reference","previous_headings":"","what":"Find or drop captions — find_captions","title":"Find or drop captions — find_captions","text":"Find drop captions","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_captions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find or drop captions — find_captions","text":"","code":"find_captions(items)  drop_captions(items, idx = NULL)  path_to_caption(items)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_captions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find or drop captions — find_captions","text":"items LaTeX2 list LaTeX2items. idx NULL vector length items","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_captions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find or drop captions — find_captions","text":"find_captions() returns indices within items caption text, attribute extra holding indices associated  macros whitespace. drop_captions() returns items captions dropped LaTeX2 object.  attribute named idx idx argument corresponding elements dropped. path_to_caption() returns path containing location first caption block within items.  attribute idx containing LaTeX2range object associated macros whitespace.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_captions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find or drop captions — find_captions","text":"","code":"parsed <- parseLatex(\"before \\\\caption{This is a caption} \\\\\\\\ after\") idx <- find_captions(parsed) parsed[idx] #> [[1]] #> BLOCK: {This is a caption} #>  parsed[attr(idx, \"extra\")[[1]]] #> [[1]] #> MACRO: \\caption #>  #> [[2]] #> BLOCK: {This is a caption} #>  #> [[3]] #> SPECIAL:   #>  #> [[4]] #> MACRO: \\\\ #>  drop_captions(parsed) #> before  after path_to_caption(parsed) #> [1] 4 #> attr(,\"idx\") #> path= range=all"},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a pattern in deparsed items — find_pattern","title":"Find a pattern in deparsed items — find_pattern","text":"Searches LaTeX2 list text using grepl() deparsed versions parts code. attempts find narrowest match(es) lie within single container.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a pattern in deparsed items — find_pattern","text":"","code":"find_pattern(items, pattern, ..., all = FALSE)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a pattern in deparsed items — find_pattern","text":"items list latex items. pattern Pattern use grepl(). ... Additional parameters pass grepl. Find matching, first?","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a pattern in deparsed items — find_pattern","text":"find_pattern() returns LaTeX2range object (TRUE) list .","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_pattern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find a pattern in deparsed items — find_pattern","text":"find_pattern() recursive search order items appear deparse.  pattern matches, attempts narrow match recursing containers dropping earlier later items. always return syntactically correct LaTeX code pattern appears.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a pattern in deparsed items — find_pattern","text":"","code":"latex <- kableExtra::kbl(mtcars[1:2, 1:2], format = \"latex\", caption = \"Sample table\") parsed <- parseLatex(latex) parsed #> \\begin{table} #>  #> \\caption{Sample table} #> \\centering #> \\begin{tabular}[t]{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular} #> \\end{table} loc <- find_pattern(parsed, \"RX4 Wag\", fixed = TRUE) loc #> path=1,7 range=39:42 print(loc, source = parsed) #> RX4 Wag"},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a code sequence — find_sequence","title":"Find a code sequence — find_sequence","text":"Find code sequence","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a code sequence — find_sequence","text":"","code":"find_sequence(items, sequence, all = FALSE, ignore_whitespace = TRUE)  items_are_equal(items1, items2)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a code sequence — find_sequence","text":"items, sequence LaTeX2 objects lists. Whether return matches, just first. ignore_whitespace Whether ignore whitespace comparisons. items1, items2 Two LaTeX2 LaTeX2item objects.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a code sequence — find_sequence","text":"find_sequence() returns path list paths sequence occurs within items. items_are_equal returns logical indicator equality removing source references.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/find_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a code sequence — find_sequence","text":"","code":"find_sequence(parseLatex(\"a & b & c\"), \"b & c\") #> path= range=5:9"},{"path":"https://dmurdoch.github.io/parseLatex/reference/finders.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscellaneous low-level finders — finders","title":"Miscellaneous low-level finders — finders","text":"Miscellaneous low-level finders","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/finders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Miscellaneous low-level finders — finders","text":"","code":"find_whitespace(items)  find_env(items, envtypes)  find_macro(items, macros)  find_catcode(items, codes)  find_tags(items, tags)  find_char(items, char)  find_block(items)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/finders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Miscellaneous low-level finders — finders","text":"items list latex items. envtypes types environment look . macros types macros look . codes codes look . tags tags look . char character look .","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/finders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Miscellaneous low-level finders — finders","text":"find_whitespace() returns indices whitespace items. find_env() returns indices within items environments envtypes. find_macro() returns index within items instances macros. find_catcode() returns index within items. specials matching code. find_tags() returns index within items. items tags matching tags. find_char() returns index within items characters matching char.  characters marked SPECIAL parser found. find_block() returns index within items blocks (.e. sequences )","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/get_contents.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience functions to get or set contents of item — get_contents","title":"Convenience functions to get or set contents of item — get_contents","text":"Convenience functions get set contents item","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/get_contents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience functions to get or set contents of item — get_contents","text":"","code":"get_contents(item)  set_contents(item, value)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/get_contents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience functions to get or set contents of item — get_contents","text":"item item Latex list (LaTeX2 list one item). value object can coerced LaTeX2 object.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/get_contents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience functions to get or set contents of item — get_contents","text":"get_contents returns contents item LaTeX2 list. set_contents returns original item contents replaced value.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/get_contents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience functions to get or set contents of item — get_contents","text":"","code":"get_contents(parseLatex(\"{abc}\")) #> abc  set_contents(parseLatex(\"{abc}\"), \"def\") #> BLOCK: {def}"},{"path":"https://dmurdoch.github.io/parseLatex/reference/get_leftovers.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve source from beyond the end of the document. — get_leftovers","title":"Retrieve source from beyond the end of the document. — get_leftovers","text":"Retrieve source beyond end document.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/get_leftovers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve source from beyond the end of the document. — get_leftovers","text":"","code":"get_leftovers(text, items = parseLatex(text))"},{"path":"https://dmurdoch.github.io/parseLatex/reference/get_leftovers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve source from beyond the end of the document. — get_leftovers","text":"text Character vector holding source. items Parsed version text.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/get_leftovers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve source from beyond the end of the document. — get_leftovers","text":"part text follows \\end{document} single newline, named according original line numbers.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/get_leftovers.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieve source from beyond the end of the document. — get_leftovers","text":"line numbering output matches text editor see; embedded newlines text result separate lines output.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/get_leftovers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve source from beyond the end of the document. — get_leftovers","text":"","code":"# line:  1                  2                3 text <- \"\\\\begin{document}\\n\\\\end{document}\\nnotes\" get_leftovers(text) #>       3  #> \"notes\""},{"path":"https://dmurdoch.github.io/parseLatex/reference/names.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions finding names and types of objects — names","title":"Utility functions finding names and types of objects — names","text":"Utility functions finding names types objects","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions finding names and types of objects — names","text":"","code":"latexTag(item)  catcode(item)  envName(item)  envName(item) <- value  macroName(item)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions finding names and types of objects — names","text":"item LaTeX2item environment value character string set name","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility functions finding names and types of objects — names","text":"latexTag() returns LaTeX2 tag item NULL. catcode() returns TeX catcode item, NULL. envName() returns Latex environment name item, NULL. macroName() returns Latex macro, NULL.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/options.html","id":null,"dir":"Reference","previous_headings":"","what":"Find or modify macro or environment options — options","title":"Find or modify macro or environment options — options","text":"Many Latex environments macros take optional parameters wrapped square brackets.  find_bracket_options finds , assuming come immediately macro. Latex environments macros take optional parameters wrapped curly brackets (braces). find_brace_options finds immediately follow environment macro (possibly bracketed options).","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find or modify macro or environment options — options","text":"","code":"find_bracket_options(items, which = 1, start = 1)  bracket_options(items, which = 1, start = 1)  bracket_options(items, which = 1, start = 1, asis = FALSE) <- value  find_brace_options(items, which = 1, start = 1)  brace_options(items, which = 1, start = 1)  brace_options(items, which = 1, start = 1, asis = FALSE) <- value"},{"path":"https://dmurdoch.github.io/parseLatex/reference/options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find or modify macro or environment options — options","text":"items list latex items. options want?  macros support one set. start Start looking items[[start]]. asis newlines added around value? value content inserted cell.  can LaTeX2 object, character string converted one.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find or modify macro or environment options — options","text":"find_bracket_options returns indices items options (including brackets). bracket_options returns LaTeX2 object containing specified options. find_brace_options returns index block containing options. brace_options returns LaTeX2 object containing specified options.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find or modify macro or environment options — options","text":"","code":"parsed <- parseLatex(\"\\\\section[a]{b}\") macro <- find_macro(parsed, \"\\\\section\") bracket_options(parsed, start = macro + 1) #> [a]  bracket_options(parsed, start = macro + 1) <- \"Short Title\" parsed #> \\section[Short Title]{b}  brace_options(parsed, start = macro + 1) #> {b}  brace_options(parsed, start = macro + 1) <- \"Long Title\" parsed #> \\section[Short Title]{Long Title}"},{"path":"https://dmurdoch.github.io/parseLatex/reference/parseLatex_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse LaTeX code — parseLatex_fn","title":"Parse LaTeX code — parseLatex_fn","text":"parseLatex function parses LaTeX source, producing structured object.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/parseLatex_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse LaTeX code — parseLatex_fn","text":"","code":"parseLatex(   text,   verbose = FALSE,   verbatim = c(\"verbatim\", \"verbatim*\", \"Sinput\", \"Soutput\"),   verb = \"\\\\Sexpr\",   defcmd = c(\"\\\\newcommand\", \"\\\\renewcommand\", \"\\\\providecommand\", \"\\\\def\",     \"\\\\let\"),   defenv = c(\"\\\\newenvironment\", \"\\\\renewenvironment\"),   catcodes = defaultCatcodes,   recover = FALSE,   showErrors = recover,   ... )"},{"path":"https://dmurdoch.github.io/parseLatex/reference/parseLatex_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse LaTeX code — parseLatex_fn","text":"text character vector containing LaTeX source code. verbose TRUE, print debug error messages. verbatim character vector containing names LaTeX environments holding verbatim text. verb character vector containing LaTeX macros assumed hold verbatim text. defcmd, defenv Character vectors macros assumed define new macro commands environments respectively.  See note limitations. catcodes list dataframe holding LaTeX \"catcodes\", defaultCatcodes. recover TRUE, attempt recover errors continue parsing.  See Details . showErrors TRUE, show errors parsing. ... Additional parameters pass showErrors.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/parseLatex_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse LaTeX code — parseLatex_fn","text":"parseLatex returns parsed Latex list class \"LaTeX2\".  Items list class \"LaTeX2item\".","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/parseLatex_fn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse LaTeX code — parseLatex_fn","text":"versions LaTeX pdflatex handle ASCII inputs, others xelatex allow Unicode input. parseLatex allows Unicode input. processing LaTeX input, interpreter can change handling characters goes, using \\catcode macro others \\makeatletter.  However, parseLatex() purely parser, interpreter, , user can change handling whole call using catcodes argument. catcodes list dataframe least two columns: char column single characters. catcode column integers range 0 15 giving corresponding catcode. parsing, parseLatex check values first. input character match anything, categorized: letter (catcode 11) using ICU function u_hasBinaryProperty(c, UCHAR_ALPHABETIC) (iswalpha(c) Windows), control character (catcode 15) code point less 32, \"\" (catcode 12) otherwise. recover = TRUE, parser mark error output, attempt continue parsing.  may lead cascade errors, sometimes help locating first error.  section text related error marked item tag ERROR.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/parseLatex_fn.html","id":"defcmd-limitations","dir":"Reference","previous_headings":"","what":"defcmd limitations","title":"Parse LaTeX code — parseLatex_fn","text":"LaTeX defining commands fairly simple syntax, \\def \\let plain Tex quite variable syntax parseLatex() attempt handle .  Stick simple syntax like \\def\\bea{\\begin{eqnarray}} work.","code":""},{"path":[]},{"path":"https://dmurdoch.github.io/parseLatex/reference/parseLatex_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse LaTeX code — parseLatex_fn","text":"","code":"parsed <- parseLatex(r\"(fran\\c{c}ais)\") parsed #> fran\\c{c}ais"},{"path":"https://dmurdoch.github.io/parseLatex/reference/parseLatex_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"The parseLatex package — parseLatex_pkg","title":"The parseLatex package — parseLatex_pkg","text":"Exports enhanced version tools::parseLatex() function handle 'LaTeX' syntax accurately. Also includes numerous functions searching modifying 'LaTeX' source.","code":""},{"path":[]},{"path":"https://dmurdoch.github.io/parseLatex/reference/parseLatex_pkg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The parseLatex package — parseLatex_pkg","text":"Maintainer: Duncan Murdoch murdoch.duncan@gmail.com contributors: R Core Team [contributor, copyright holder]","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/path_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Find path to a particular kind of item — path_to","title":"Find path to a particular kind of item — path_to","text":"Find path particular kind item","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/path_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find path to a particular kind of item — path_to","text":"","code":"path_to(items, is_fn, ..., all = FALSE)  get_item(items, path)  set_item(items, path, value)  insert_values(items, path, values)  get_container(items, path)  get_which(path)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/path_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find path to a particular kind of item — path_to","text":"items list latex items. is_fn test function use. ... Additional parameters pass is_fn. Find matching, first? path Integer vector subitems value LaTeX2item set value. values LaTeX2 list LaTeX2item.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/path_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find path to a particular kind of item — path_to","text":"path_to() returns recursive path first example matching is_fn conditions, list paths matching items. get_item() returns item given path. set_item() replaces item given path, returns modified version items. insert_values() inserts values item mentioned path, returns modified version items. get_container() returns item containing given path get_which() returns index item within container.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/path_to.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find path to a particular kind of item — path_to","text":"path_to() recursive search order items appear deparse.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/path_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find path to a particular kind of item — path_to","text":"","code":"latex <- kableExtra::kbl(mtcars[1:2, 1:2], format = \"latex\", caption = \"Sample table\") parsed <- parseLatex(latex) parsed #> \\begin{table} #>  #> \\caption{Sample table} #> \\centering #> \\begin{tabular}[t]{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular} #> \\end{table} path <- path_to(parsed, is_fn = is_env,                         envtypes = \"tabular\") get_item(parsed, path) #> ENVIRONMENT: \\begin{tabular}[t]{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular}"},{"path":"https://dmurdoch.github.io/parseLatex/reference/print.LaTeX2item.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods — print.LaTeX2item","title":"Print methods — print.LaTeX2item","text":"Print methods","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/print.LaTeX2item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods — print.LaTeX2item","text":"","code":"# S3 method for class 'LaTeX2item' print(x, ...)  # S3 method for class 'LaTeX2' print(x, tags = FALSE, ...)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/print.LaTeX2item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods — print.LaTeX2item","text":"x Object work . ... Extra parameters pass deparseLatex. tags Whether display LaTeX2 tags.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/reduce_whitespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove excess whitespace recursively — reduce_whitespace","title":"Remove excess whitespace recursively — reduce_whitespace","text":"Remove excess whitespace recursively","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/reduce_whitespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove excess whitespace recursively — reduce_whitespace","text":"","code":"reduce_whitespace(items, recursive = TRUE, all = FALSE)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/reduce_whitespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove excess whitespace recursively — reduce_whitespace","text":"items LaTeX2 object. recursive Apply lists within items. TRUE, remove white space, just doubles.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/reduce_whitespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove excess whitespace recursively — reduce_whitespace","text":"items double spaces double newlines set single, trailing spaces removed (whitespace removed, TRUE).","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/reduce_whitespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove excess whitespace recursively — reduce_whitespace","text":"","code":"parsed <- parseLatex(\"a  {b\\n\\nc}\") parsed #> a  {b #>  #> c} reduce_whitespace(parsed) #> a  {b #>  #> c}"},{"path":"https://dmurdoch.github.io/parseLatex/reference/set_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Set items in a LaTeX2 object — set_range","title":"Set items in a LaTeX2 object — set_range","text":"Set items LaTeX2 object","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/set_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set items in a LaTeX2 object — set_range","text":"","code":"set_range(items, range, values)  get_range(items, range)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/set_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set items in a LaTeX2 object — set_range","text":"items LaTeX2 object list LaTeX2item objects. range LaTeX2range object. values object can coerced LaTeX2 object (range$range NULL) LaTeX2item.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/set_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set items in a LaTeX2 object — set_range","text":"set_range() replaces item(s) given path, returns modified version items. get_range() extracts specified range returns LaTeX2 object.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/set_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set items in a LaTeX2 object — set_range","text":"","code":"latex <- kableExtra::kbl(mtcars[1:2, 1:2], format = \"latex\", caption = \"Sample table\") parsed <- parseLatex(latex) tablepath <- path_to(parsed, is_env, envtypes = \"tabular\") range <- LaTeX2range(tablepath, 11) set_range(parsed, range, \"The 11th item\") #> \\begin{table} #>  #> \\caption{Sample table} #> \\centering #> \\begin{tabular}[t]{l|r|r} #> \\hline #>   & The 11th item & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular} #> \\end{table} get_range(parsed, range) #> mpg"},{"path":"https://dmurdoch.github.io/parseLatex/reference/showErrors.html","id":null,"dir":"Reference","previous_headings":"","what":"Show errors in parsed Latex object — showErrors","title":"Show errors in parsed Latex object — showErrors","text":"Show errors parsed Latex object","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/showErrors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show errors in parsed Latex object — showErrors","text":"","code":"showErrors(   x,   repeatSrcline = FALSE,   errorMsgTwice = FALSE,   lineNumbers = TRUE,   showAllLines = FALSE )"},{"path":"https://dmurdoch.github.io/parseLatex/reference/showErrors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show errors in parsed Latex object — showErrors","text":"x LaTeX2 object. repeatSrcline Repeat source line multiple errors? errorMsgTwice Show error message start end multiline error? lineNumbers Show line numbers output? showAllLines Show lines whether errors ?","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/showErrors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show errors in parsed Latex object — showErrors","text":"list paths errors, invisibly.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/showErrors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show errors in parsed Latex object — showErrors","text":"","code":"parsed <- parseLatex(\"\\\\end{baz} \\\\begin{foo} \\n \\\\begin{bar}  $1+1\\n4\",                      recover = TRUE, showErrors = FALSE) showErrors(parsed) #> 1: \\end{baz} \\begin{foo}  #>    <--> #>    unexpected END '\\end' #>              <----------- #> 2:  \\begin{bar}  $1+1 #>     <---------------- #>                  <--- #> 3: 4 #>    -> #>    unexpected END_OF_INPUT #>   '$' at 2:15 is still open #>    -> #>    unexpected END_OF_INPUT #>   '\\begin{bar}' at 2:2 is still open #>    -> #>    unexpected END_OF_INPUT #>   '\\begin{foo}' at 1:11 is still open #>"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableContent.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions relating to the data content of a table — find_tableContent","title":"Functions relating to the data content of a table — find_tableContent","text":"Functions relating data content table","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableContent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions relating to the data content of a table — find_tableContent","text":"","code":"find_tableContent(table)  tableContent(table)  tableContent(table, asis = FALSE) <- value"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableContent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions relating to the data content of a table — find_tableContent","text":"table tabular-like environment work . asis newlines added around value? value content inserted cell.  can LaTeX2 object, character string converted one.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableContent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions relating to the data content of a table — find_tableContent","text":"find_tableContent() returns indices entries corresponding content table. tableContent() returns LaTeX2 object containing table content options.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableContent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions relating to the data content of a table — find_tableContent","text":"Unless asis = TRUE, tableContent(table) <- value add newlines start end end present, make result readable.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableContent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions relating to the data content of a table — find_tableContent","text":"","code":"latex <- kableExtra::kbl(mtcars[1:2, 1:2], format = \"latex\") parsed <- parseLatex(latex) table <- parsed[[find_tabular(parsed)]] table #> ENVIRONMENT: \\begin{tabular}[t]{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular} tableContent(table) #>  #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #>   tableContent(table) <- \"Mazda RX4 & 21 & 6\\\\\\\\\" table #> ENVIRONMENT: \\begin{tabular}[t]{l|r|r} #> Mazda RX4 & 21 & 6\\\\ #> \\end{tabular} tableContent(table, asis = TRUE) <- \"Mazda RX4 & 21 & 6\\\\\\\\\" table #> ENVIRONMENT: \\begin{tabular}[t]{l|r|r}Mazda RX4 & 21 & 6\\\\\\end{tabular}"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableOption.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions related to table options. — tableOption","title":"Functions related to table options. — tableOption","text":"Functions related table options.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableOption.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions related to table options. — tableOption","text":"","code":"find_posOption(table)  posOption(table)  posOption(table, asis = FALSE) <- value  find_widthOption(table)  widthOption(table)  widthOption(table, asis = FALSE) <- value  find_columnOptions(table)  columnOptions(table)  columnOption(table, column)  columnOptions(table, asis = FALSE) <- value  columnOption(table, column) <- value"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableOption.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions related to table options. — tableOption","text":"table known tabular-like environment object, contents one. asis Whether make small modifications replacement functions. value character string LaTeX2 object. column column?","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableOption.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions related to table options. — tableOption","text":"find_posOption() returns indices entries corresponding \"pos\" option, including brackets, within table. posOption() returns LaTeX2 object containing \"pos\" option. find_widthOption() returns index block corresponding \"width\" option, one. tabular-like environments . widthOption() returns LaTeX2 object containing \"width\" option, table one. find_columnOptions() returns index block corresponding column spec. columnOptions() returns LaTeX2 object containing \"column\" options. columnOption() returns LaTeX2 object containing requested column option.  \"|\" divider included.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableOption.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions related to table options. — tableOption","text":"Unless asis == TRUE, value value posOption(table) <- value can specified without enclosing brackets.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableOption.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions related to table options. — tableOption","text":"","code":"latex <- kableExtra::kbl(mtcars[1:2, 1:2], format = \"latex\") parsed <- parseLatex(latex) table <- parsed[[find_tabular(parsed)]] table #> ENVIRONMENT: \\begin{tabular}[t]{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular} find_posOption(table) #> [1] 1 2 3  posOption(table) #> [t]  posOption(table) <- \"h\" posOption(table) #> [h] find_widthOption(table) #> NULL  widthOption(table) #> NULL  find_columnOptions(table) #> [1] 4 columnOptions(table) #> {l|r|r}  columnOption(table, 3) #> r columnOptions(table) <- \"lrr\" table #> ENVIRONMENT: \\begin{tabular}[h]{lrr} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular} columnOption(table, 3) <- \"p{1cm}\" columnOptions(table) #> {lrp{1cm}}"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableRow.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to work with rows in tables — find_tableRow","title":"Functions to work with rows in tables — find_tableRow","text":"Functions work rows tables","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableRow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to work with rows in tables — find_tableRow","text":"","code":"find_tableRow(table, row, withExtras = FALSE, withData = TRUE)  tableRow(table, row, withExtras = FALSE, withData = TRUE)  tableRow(table, row, asis = FALSE, withExtras = FALSE, withData = TRUE) <- value"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableRow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to work with rows in tables — find_tableRow","text":"table tabular-like environment work . row row table (1 top row), including rows labels. withExtras TRUE, include extras line data, \\hline, etc. withData TRUE, include data. asis linebreak newline added value? value content inserted cell.  can LaTeX2 object, character string converted one.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableRow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to work with rows in tables — find_tableRow","text":"find_tableRow() returns indices entries corresponding content row table. tableRow() returns LaTeX2 object containing table content row.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableRow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to work with rows in tables — find_tableRow","text":"Unless asis = TRUE, tableContent(table) <- value add \"\\\" newline end present. row value higher number rows table, blank rows added fill space . withExtras = TRUE want result start new line, need add newline explicitly value using assignment function.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableRow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to work with rows in tables — find_tableRow","text":"","code":"latex <- kableExtra::kbl(mtcars[1:2, 1:2], format = \"latex\") parsed <- parseLatex(latex) table <- parsed[[find_tabular(parsed)]] find_tableRow(table, 1) #> [1]  8  9 10 11 12 13 14 15 16  tableRow(table, 1) #>   & mpg & cyl\\\\ tableRow(table, 1, withExtras = TRUE) #>  #> \\hline #>   & mpg & cyl\\\\  tableRow(table, 5) <- \"a & b & c\" table #> ENVIRONMENT: \\begin{tabular}[t]{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #>  &  & \\\\ #> a & b & c\\\\ #> \\hline #> \\end{tabular}"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableRule.html","id":null,"dir":"Reference","previous_headings":"","what":"Work with rules in tables — tableRule","title":"Work with rules in tables — tableRule","text":"LaTeX, \"rules\" horizontal lines table. functions let rules extracted modified.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableRule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Work with rules in tables — tableRule","text":"","code":"find_rules(table)  rules(table, idx = find_rules(table))  find_rule(table, row, idx = find_rules(table))  rule(table, row, idx = find_rules(table))  rule(table, row, asis = FALSE, idx = find_rules(table)) <- value"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableRule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Work with rules in tables — tableRule","text":"table tabular-like environment work . idx list indices produced find_rules(). row rules precede contents row. rule final row uses row = tableNrow(table) + 1. asis newline added value?  asis = TRUE, . value content inserted cell.  can LaTeX2 object, character string converted one.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableRule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Work with rules in tables — tableRule","text":"find_rules() returns list indices rules row, including whitespace following one. rules(table) returns list rules row.  last entry rule(s) following last row. find_rule(table, row) returns indices rule(s) row, including final whitespace. rule(table, row) returns indices rule(s) row.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tableRule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Work with rules in tables — tableRule","text":"","code":"latex <- kableExtra::kbl(mtcars[1:2, 1:2], format = \"latex\") parsed <- parseLatex(latex) table <- parsed[[find_tabular(parsed)]] table #> ENVIRONMENT: \\begin{tabular}[t]{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular} find_rules(table) #> [[1]] #> [1] 6 7 8 #>  #> [[2]] #> [1] 18 19 #>  #> [[3]] #> [1] 35 36 #>  #> [[4]] #> [1] 54 55 #>   rules(table) #> [[1]] #> \\hline #>    #>  #> [[2]] #> \\hline #>  #>  #> [[3]] #> \\hline #>  #>  #> [[4]] #> \\hline #>  #>   find_rule(table, 1) #> [1] 6  rule(table, 1) #> \\hline  rule(table, 2) <- \"\\\\midrule\" table #> ENVIRONMENT: \\begin{tabular}[t]{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\midrule #>  #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular}"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tablecalcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculations on tables — tablecalcs","title":"Calculations on tables — tablecalcs","text":"Calculations tables","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tablecalcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculations on tables — tablecalcs","text":"","code":"tableNrow(table)  tableNcol(table)  tableDim(table)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tablecalcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculations on tables — tablecalcs","text":"table known tabular-like environment object.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tablecalcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculations on tables — tablecalcs","text":"tableNrow() returns number rows table. tableNcol() returns number columns table. tableDim() returns number rows columns table.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tablecalcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculations on tables — tablecalcs","text":"","code":"latex <- kableExtra::kbl(mtcars[1:2, 1:3], format = \"latex\") parsed <- parseLatex(latex) table <- parsed[[find_tabular(parsed)]] table #> ENVIRONMENT: \\begin{tabular}[t]{l|r|r|r} #> \\hline #>   & mpg & cyl & disp\\\\ #> \\hline #> Mazda RX4 & 21 & 6 & 160\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6 & 160\\\\ #> \\hline #> \\end{tabular} tableNrow(table) #> [1] 3 tableNcol(table) #> [1] 4 tableDim(table) #> [1] 3 4"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tablecell.html","id":null,"dir":"Reference","previous_headings":"","what":"Work with table cells — tableCell","title":"Work with table cells — tableCell","text":"functions work content cells tabular-like environments.  Cells numbered first row (typically column titles) row 1.  Rules (.e. horizontal lines) considered part cell.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tablecell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Work with table cells — tableCell","text":"","code":"find_tableCell(table, row, col)  tableCell(table, row, col)  tableCell(table, row, col, asis = FALSE) <- value"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tablecell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Work with table cells — tableCell","text":"table tabular-like environment work . row, col row column table. asis blanks added around value? value content inserted cell.  can LaTeX2 object, character string converted one.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tablecell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Work with table cells — tableCell","text":"find_tableCell() returns indices entries corresponding content cell (row, col) table. tableCell() returns LaTeX2 object containing table content cell (&).","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tablecell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Work with table cells — tableCell","text":"find_tableCell() returns NA requested cell missing earlier cell covered multiple columns.  signals error request made beyond bounds table. Unless asis = TRUE, tableContent(table) <- value add blanks start end end present, make result readable. col higher current table width, assignment fail error.  row high, blank lines added succeed.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tablecell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Work with table cells — tableCell","text":"","code":"latex <- kableExtra::kbl(mtcars[1:2, 1:2], format = \"latex\") parsed <- parseLatex(latex) table <- parsed[[find_tabular(parsed)]] find_tableCell(table, 1, 2) #> [1] 10 11 12  tableCell(table, 1, 2) #>  mpg   tableCell(table, 5, 2) <- \" d \" table #> ENVIRONMENT: \\begin{tabular}[t]{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #>  &  & \\\\ #>  & d & \\\\ #> \\hline #> \\end{tabular}"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions related to parsing LaTeX tables — tables","title":"Functions related to parsing LaTeX tables — tables","text":"Functions related parsing LaTeX tables","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions related to parsing LaTeX tables — tables","text":"","code":"is_Tabular(item)  find_tabular(items, start = 1)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions related to parsing LaTeX tables — tables","text":"item item LaTeX2 list object. items LaTeX2 list object. start start looking.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions related to parsing LaTeX tables — tables","text":"is_Tabular() returns boolean indicating tabular-like environment. find_tabular() returns index first tabular-like environment, NA none found.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions related to parsing LaTeX tables — tables","text":"","code":"latex <- kableExtra::kbl(mtcars[1:2, 1:2], format = \"latex\") parsed <- parseLatex(latex) is_Tabular(parsed[[2]]) #> [1] TRUE   find_tabular(parsed) #> [1] 2 table <- parsed[[find_tabular(parsed)]] table #> ENVIRONMENT: \\begin{tabular}[t]{l|r|r} #> \\hline #>   & mpg & cyl\\\\ #> \\hline #> Mazda RX4 & 21 & 6\\\\ #> \\hline #> Mazda RX4 Wag & 21 & 6\\\\ #> \\hline #> \\end{tabular}"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Test objects — tests","title":"Test objects — tests","text":"Test objects","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test objects — tests","text":"","code":"is_env(item, envtypes = NULL)  is_macro(item, macros = NULL)  is_block(item)  is_bracket(item, bracket)  is_whitespace(item)  is_text(item)  is_error(item)  is_char(item, char)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test objects — tests","text":"item object class LaTeX2item test. envtypes Types Latex environment check , e.g. \"table\". macros macros match, e.g. \"\\\\\\\\caption\". bracket bracket looking ? char character match","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test objects — tests","text":"is_env() returns boolean item matches. is_macro() returns boolean indicating match. is_block() returns boolean indicating whether item block wrapped curly braces. is_bracket() returns boolean indicating item bracket specified type. is_whitespace() returns boolean indicating item space, tab newline. is_text() returns boolean indicating item text. is_error() returns boolean indicating item error. is_char() returns boolean indicating item SPECIAL matching char.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/tests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test objects — tests","text":"","code":"is_bracket(parseLatex(\"[]\")[[1]], \"[\") #> [1] TRUE"},{"path":"https://dmurdoch.github.io/parseLatex/reference/vector_to_latex2.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert vector to items — vector_to_latex2","title":"Convert vector to items — vector_to_latex2","text":"Convert vector items","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/vector_to_latex2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert vector to items — vector_to_latex2","text":"","code":"vector_to_latex2(x)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/vector_to_latex2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert vector to items — vector_to_latex2","text":"x list vector convert.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/vector_to_latex2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert vector to items — vector_to_latex2","text":"LaTeX2 object containing entries x concatenated.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/vector_to_latex2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert vector to items — vector_to_latex2","text":"","code":"print(vector_to_latex2(1:3), tags = TRUE) #>  SPECIAL(OTHER): \"1\" #>  SPECIAL(OTHER): \"2\" #>  SPECIAL(OTHER): \"3\""},{"path":"https://dmurdoch.github.io/parseLatex/reference/vector_to_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert vector to table row and back — vector_to_row","title":"Convert vector to table row and back — vector_to_row","text":"Convert vector table row back","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/vector_to_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert vector to table row and back — vector_to_row","text":"","code":"vector_to_row(cells, asis = FALSE, linebreak = TRUE)  row_to_vector(row, asis = FALSE, deparse = TRUE)"},{"path":"https://dmurdoch.github.io/parseLatex/reference/vector_to_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert vector to table row and back — vector_to_row","text":"cells list vector cell contents. asis FALSE, add remove blanks around cell contents. linebreak TRUE, add line break marker. row row table deparse result deparsed?","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/vector_to_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert vector to table row and back — vector_to_row","text":"vector_to_row returns LaTeX2 object row tabular object. row_to_vector returns character vector deparsed contents row, deparse FALSE, list contents.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/reference/vector_to_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert vector to table row and back — vector_to_row","text":"","code":"vector_to_row(1:3) #> 1 & 2 & 3\\\\ row_to_vector(\"1 & 2 & content \\\\\\\\\") #> [1] \"1\"       \"2\"       \"content\" row_to_vector(\"1 & 2 & content \\\\\\\\\", deparse = FALSE) #> [[1]] #> 1 #>  #> [[2]] #> 2 #>  #> [[3]] #> content #>"},{"path":"https://dmurdoch.github.io/parseLatex/news/index.html","id":"parselatex-0311","dir":"Changelog","previous_headings":"","what":"parseLatex 0.3.11","title":"parseLatex 0.3.11","text":"Added row_to_vector(). Added is_text() is_error(). Added showErrors(), changed formatting errors deparseLatex(). parseLatex(recover = TRUE) now calls showErrors() rather generating warnings. Fixed parsing bugs related error recovery. Sequences spaces tabs sequences linebreaks collected single items containing full sequence characters. Deparsing SPECIALs improved. Added trim_whitespace(), envName()<-, find_block() insert_values() help kableExtra support. Added support tabu tables. Added is_char(), find_captions(), drop_captions(), path_to_caption(), get_range(). drop_items() now works LaTeX2Item lists. tableRow() default ignores \\pagebreak \\nopagebreak. new argument withExtras allows include extras line result. withData allows exclude data. find_tableRow() tableRow<- similar modifications. find_rule() rule() now remove final whitespace result. Added columnOption() columnOption<-() functions. Added new_env(), similar new_block().","code":""},{"path":"https://dmurdoch.github.io/parseLatex/news/index.html","id":"parselatex-030","dir":"Changelog","previous_headings":"","what":"parseLatex 0.3.0","title":"parseLatex 0.3.0","text":"CRAN release: 2025-02-20 Added stdbool.h includes compatibility older gcc. (Thanks Dirk Eddelbuettel report PR #2). Added configure script check bison (Unix-alike ). Adjacent math environments treated syntax error. \\let now handled way \\def: next two tokens considered evaluation. Added arguments defcmd defenv parseLatex() allow user specify defining macros. names also now allowed magic comments. Spaces verb macro argument caused parsing incorrect. Added argument recover parseLatex(), attempt recover parsing error. may help diagnosing error. error wrapped ERROR tag displayed >>>text causing error<<<.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/news/index.html","id":"parselatex-021","dir":"Changelog","previous_headings":"","what":"parseLatex 0.2.1","title":"parseLatex 0.2.1","text":"CRAN release: 2025-02-11 Minor modifications CRAN submission.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/news/index.html","id":"parselatex-020","dir":"Changelog","previous_headings":"","what":"parseLatex 0.2.0","title":"parseLatex 0.2.0","text":"Added find_sequence(), set_contents(). Add DEFINITION tag allow \\begin etc. temporarily ignored. allows parseLatex parse \\newenvironment related macros create definitions. parseLatex() now stops parsing \\end{document} just LaTeX . get_leftovers() function can retrieve unparsed text. Added support “magic comments”. See vignette details. verb macros now allow embedded braces long balanced.","code":""},{"path":"https://dmurdoch.github.io/parseLatex/news/index.html","id":"parselatex-010","dir":"Changelog","previous_headings":"","what":"parseLatex 0.1.0","title":"parseLatex 0.1.0","text":"Initial version.","code":""}]
